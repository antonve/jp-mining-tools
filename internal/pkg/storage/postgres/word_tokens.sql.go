// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: word_tokens.sql

package postgres

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const findMatchingTokens = `-- name: FindMatchingTokens :many
select
  id,
  language_code,
  token,
  meta,
  notes,
  rating,
  created_at,
  updated_at
from word_tokens
where
  language_code = $1
  and token = any($2::varchar(255))
order by created_at desc
`

type FindMatchingTokensParams struct {
	LanguageCode string
	Tokens       string
}

type FindMatchingTokensRow struct {
	ID           uuid.UUID
	LanguageCode string
	Token        string
	Meta         json.RawMessage
	Notes        sql.NullString
	Rating       sql.NullInt16
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) FindMatchingTokens(ctx context.Context, arg FindMatchingTokensParams) ([]FindMatchingTokensRow, error) {
	rows, err := q.db.QueryContext(ctx, findMatchingTokens, arg.LanguageCode, arg.Tokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindMatchingTokensRow
	for rows.Next() {
		var i FindMatchingTokensRow
		if err := rows.Scan(
			&i.ID,
			&i.LanguageCode,
			&i.Token,
			&i.Meta,
			&i.Notes,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
